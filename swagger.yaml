openapi: 3.0.3
info:
  title: Tiger API
  description: |
    REST API for the Tiger training platform. All responses are wrapped in the
    `ApiResponse` envelope unless otherwise noted.
  version: 1.0.0
servers:
  - url: https://localhost:3001
    description: Local development server
  - url: https://api.tiger.example.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        data:
          description: Wrapped payload.
        meta:
          type: object
          properties:
            page:
              type: integer
              minimum: 1
            limit:
              type: integer
              minimum: 1
            total:
              type: integer
              minimum: 0
            totalPages:
              type: integer
              minimum: 0
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
    ApiError:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
    Address:
      type: object
      required:
        - line1
        - city
        - state
        - postalCode
        - country
      properties:
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
    MediaItem:
      type: object
      required:
        - type
        - src
      properties:
        type:
          type: string
          enum: [image, video]
        src:
          type: string
          format: uri
        alt:
          type: string
        caption:
          type: string
    SocialLink:
      type: object
      required:
        - platform
        - url
      properties:
        platform:
          type: string
        url:
          type: string
          format: uri
    ContentBlock:
      type: object
      required:
        - id
        - key
        - locale
        - json
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          readOnly: true
        key:
          type: string
        locale:
          type: string
        json:
          description: Arbitrary JSON payload rendered for the content block.
          type: object
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ClassDiscipline:
      type: object
      required:
        - id
        - slug
        - name
        - description
        - tags
        - media
      properties:
        id:
          type: string
          readOnly: true
        slug:
          type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        media:
          type: array
          items:
            $ref: '#/components/schemas/MediaItem'
    ClassTemplate:
      type: object
      required:
        - id
        - disciplineId
        - title
        - level
        - durationMin
        - description
        - gearNeeded
        - coachIds
      properties:
        id:
          type: string
          readOnly: true
        disciplineId:
          type: string
        title:
          type: string
        level:
          type: string
          enum: [beginner, intermediate, advanced, all_levels]
        durationMin:
          type: integer
        description:
          type: string
        gearNeeded:
          type: array
          items:
            type: string
        coachIds:
          type: array
          items:
            type: string
        price:
          type: number
        prerequisites:
          type: array
          items:
            type: string
    BookedSession:
      type: object
      required:
        - sessionDate
        - repetition
      properties:
        templateId:
          type: string
        name:
          type: string
        isPrivate:
          type: boolean
          description: Indicates if the session is private and should not be shown publicly
        sessionDate:
          type: string
          format: date-time
        repetition:
          type: string
          enum: [daily, weekly, monthly]
    CoachPublicBookedSessions:
      type: object
      required:
        - coachId
        - coachName
        - bookedSessions
      properties:
        coachId:
          type: string
        coachName:
          type: string
        bookedSessions:
          type: array
          items:
            $ref: '#/components/schemas/BookedSession'
    Coach:
      type: object
      required:
        - id
        - name
        - bio
        - accolades
        - socials
        - photo
        - specialties
        - bookedSessions
        - isActive
      properties:
        id:
          type: string
        name:
          type: string
        bio:
          type: string
        accolades:
          type: array
          items:
            type: string
        socials:
          type: array
          items:
            $ref: '#/components/schemas/SocialLink'
        photo:
          type: string
          format: uri
        specialties:
          type: array
          items:
            type: string
        bookedSessions:
          type: array
          items:
            $ref: '#/components/schemas/BookedSession'
        hourlyRate:
          type: number
        isActive:
          type: boolean
    MembershipPlan:
      type: object
      required:
        - id
        - name
        - price
        - currency
        - period
        - benefits
        - classAccess
        - terms
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        price:
          type: number
        currency:
          type: string
        period:
          type: string
          enum: [monthly, quarterly, yearly]
        benefits:
          type: array
          items:
            type: string
        maxClassesPerPeriod:
          type: integer
        classAccess:
          type: array
          items:
            type: string
        terms:
          type: string
        isPopular:
          type: boolean
    ProductVariant:
      type: object
      required:
        - id
        - name
        - price
        - stock
        - attributes
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
        attributes:
          type: object
          additionalProperties:
            type: string
    ProductAttribute:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
    Product:
      type: object
      required:
        - id
        - sku
        - title
        - description
        - categoryId
        - images
        - variants
        - price
        - stock
        - attributes
        - isActive
      properties:
        id:
          type: string
          readOnly: true
        sku:
          type: string
        title:
          type: string
        description:
          type: string
        categoryId:
          type: string
        images:
          type: array
          items:
            type: string
            format: uri
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        price:
          type: number
        compareAtPrice:
          type: number
        stock:
          type: integer
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttribute'
        isActive:
          type: boolean
    ProductCategory:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        parentId:
          type: string
    CartItem:
      type: object
      required:
        - productId
        - quantity
        - price
      properties:
        productId:
          type: string
        variantId:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
    Cart:
      type: object
      required:
        - id
        - userId
        - items
        - subtotal
        - tax
        - total
        - createdAt
      properties:
        id:
          type: string
          readOnly: true
        userId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          readOnly: true
        tax:
          type: number
          readOnly: true
        total:
          type: number
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    OrderCustomer:
      type: object
      required:
        - name
        - email
        - phoneNumber
        - paymentMethod
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        paymentMethod:
          type: string
    OrderItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
    Order:
      type: object
      required:
        - id
        - customer
        - products
        - deliveryMethod
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          readOnly: true
        customer:
          $ref: '#/components/schemas/OrderCustomer'
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        deliveryMethod:
          type: string
        status:
          type: string
          enum: [placed, in_delivery, completed]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    OrderInput:
      type: object
      required:
        - customer
        - products
        - deliveryMethod
      properties:
        customer:
          $ref: '#/components/schemas/OrderCustomer'
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        deliveryMethod:
          type: string
        status:
          type: string
          enum: [placed, in_delivery, completed]
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      required:
        - id
        - email
        - name
        - roles
        - memberships
        - credits
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          readOnly: true
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [guest, member, coach, admin]
        memberships:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                readOnly: true
              planId:
                type: string
              status:
                type: string
              startDate:
                type: string
                format: date-time
              endDate:
                type: string
                format: date-time
              remainingClasses:
                type: integer
        credits:
          type: integer
        defaultPaymentMethod:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
paths:
  /health:
    get:
      tags: [System]
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Authenticate a user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login succeeded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new member account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: Registration succeeded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/content/{key}:
    parameters:
      - in: path
        name: key
        required: true
        schema:
          type: string
        description: Content key identifier
    get:
      tags: [Content]
      summary: Retrieve a content block by key
      operationId: getContentByKey
      parameters:
        - in: query
          name: locale
          schema:
            type: string
            default: en
      responses:
        '200':
          description: Content block JSON
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        description: Localized JSON content
        '404':
          description: Content block not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags: [Content]
      summary: Create or update a content block
      operationId: updateContent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [json]
              properties:
                locale:
                  type: string
                  default: en
                json:
                  description: Arbitrary JSON payload to persist
                  type: object
      responses:
        '200':
          description: Content block saved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ContentBlock'
        '400':
          description: Missing JSON payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Save error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Content]
      summary: Delete a localized content block
      operationId: deleteContent
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: locale
          schema:
            type: string
            default: en
      responses:
        '200':
          description: Content block deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ContentBlock'
        '404':
          description: Content block not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/admin/content:
    get:
      tags: [Admin]
      summary: List all content blocks for a locale
      operationId: adminListContent
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: locale
          schema:
            type: string
            default: en
      responses:
        '200':
          description: Content blocks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ContentBlock'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/admin/disciplines:
    get:
      tags: [Admin]
      summary: List all class disciplines
      operationId: adminListDisciplines
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Disciplines
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ClassDiscipline'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/admin/class-templates:
    get:
      tags: [Admin]
      summary: List all class templates
      operationId: adminListClassTemplates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Class templates
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ClassTemplate'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/admin/product-categories:
    get:
      tags: [Admin]
      summary: List product categories
      operationId: adminListProductCategories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductCategory'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/disciplines:
    get:
      tags: [Classes]
      summary: List class disciplines
      operationId: listDisciplines
      responses:
        '200':
          description: Disciplines
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ClassDiscipline'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Classes]
      summary: Create a class discipline
      operationId: createDiscipline
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassDiscipline'
      responses:
        '201':
          description: Discipline created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClassDiscipline'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/disciplines/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags: [Classes]
      summary: Update a class discipline
      operationId: updateDiscipline
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassDiscipline'
      responses:
        '200':
          description: Discipline updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClassDiscipline'
        '404':
          description: Discipline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Classes]
      summary: Delete a class discipline
      operationId: deleteDiscipline
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Discipline deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
        '404':
          description: Discipline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/templates:
    get:
      tags: [Classes]
      summary: List class templates
      operationId: listClassTemplates
      responses:
        '200':
          description: Class templates
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ClassTemplate'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Classes]
      summary: Create a class template
      operationId: createClassTemplate
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassTemplate'
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClassTemplate'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/templates/discipline/{disciplineId}:
    get:
      tags: [Classes]
      summary: List class templates for a discipline
      operationId: listClassTemplatesByDiscipline
      parameters:
        - in: path
          name: disciplineId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Class templates for a discipline
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ClassTemplate'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/templates/{slug}:
    get:
      tags: [Classes]
      summary: Get a class template by slug
      operationId: getClassTemplateBySlug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Class template
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClassTemplate'
        '404':
          description: Class template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/classes/templates/{id}:
    put:
      tags: [Classes]
      summary: Update a class template
      operationId: updateClassTemplate
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassTemplate'
      responses:
        '200':
          description: Template updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClassTemplate'
        '404':
          description: Class template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Classes]
      summary: Delete a class template
      operationId: deleteClassTemplate
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
        '404':
          description: Class template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/coaches:
    get:
      tags: [Coaches]
      summary: List coaches
      operationId: listCoaches
      parameters:
        - in: query
          name: specialty
          schema:
            type: string
      responses:
        '200':
          description: Coaches
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Coach'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Coaches]
      summary: Create a coach profile
      operationId: createCoach
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coach'
      responses:
        '201':
          description: Coach created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Coach'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/coaches/booked-sessions:
    get:
      tags: [Coaches]
      summary: List non-private booked sessions for all coaches
      operationId: getAllCoachBookedSessions
      responses:
        '200':
          description: Non-private booked sessions grouped by coach
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CoachPublicBookedSessions'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/coaches/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags: [Coaches]
      summary: Get coach details
      operationId: getCoach
      responses:
        '200':
          description: Coach details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Coach'
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags: [Coaches]
      summary: Update a coach profile
      operationId: updateCoach
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coach'
      responses:
        '200':
          description: Coach updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Coach'
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Coaches]
      summary: Delete a coach profile
      operationId: deleteCoach
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Coach deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/coaches/{id}/booked-sessions:
    get:
      tags: [Coaches]
      summary: List sessions booked with a coach
      operationId: getCoachBookedSessions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booked sessions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookedSession'
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Coaches]
      summary: Add a booked session for a coach
      operationId: addCoachBookedSession
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookedSession'
      responses:
        '201':
          description: Booked session created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BookedSession'
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/membership-plans:
    get:
      tags: [Membership]
      summary: List membership plans
      operationId: listMembershipPlans
      responses:
        '200':
          description: Membership plans
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MembershipPlan'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Membership]
      summary: Create a membership plan
      operationId: createMembershipPlan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlan'
      responses:
        '201':
          description: Plan created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPlan'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/membership-plans/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags: [Membership]
      summary: Get membership plan details
      operationId: getMembershipPlan
      responses:
        '200':
          description: Membership plan
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPlan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags: [Membership]
      summary: Update a membership plan
      operationId: updateMembershipPlan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlan'
      responses:
        '200':
          description: Plan updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPlan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Membership]
      summary: Delete a membership plan
      operationId: deleteMembershipPlan
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plan deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPlan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/shop/categories:
    get:
      tags: [Shop]
      summary: List product categories
      operationId: listShopCategories
      responses:
        '200':
          description: Categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductCategory'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/shop/products:
    get:
      tags: [Shop]
      summary: Search and list products
      operationId: listProducts
      parameters:
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: categoryId
          schema:
            type: string
        - in: query
          name: inStock
          schema:
            type: boolean
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 12
      responses:
        '200':
          description: Paginated products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Shop]
      summary: Create a product
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/shop/products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags: [Shop]
      summary: Get product details
      operationId: getProduct
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags: [Shop]
      summary: Update a product
      operationId: updateProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Shop]
      summary: Soft-delete a product
      operationId: deleteProduct
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/shop/cart:
    post:
      tags: [Shop]
      summary: Build a cart for checkout
      operationId: createCart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, items]
              properties:
                userId:
                  type: string
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [productId, quantity]
                    properties:
                      productId:
                        type: string
                      variantId:
                        type: string
                      quantity:
                        type: integer
                        minimum: 1
      responses:
        '200':
          description: Calculated cart summary
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/shop/whatsapp-config:
    get:
      tags: [Shop]
      summary: Retrieve WhatsApp ordering configuration
      operationId: getWhatsappConfig
      responses:
        '200':
          description: WhatsApp configuration
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          phoneE164:
                            type: string
                          template:
                            type: string
  /api/orders:
    get:
      tags: [Orders]
      summary: List orders
      operationId: listOrders
      responses:
        '200':
          description: Orders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags: [Orders]
      summary: Create an order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/orders/{orderId}:
    parameters:
      - in: path
        name: orderId
        required: true
        schema:
          type: string
    get:
      tags: [Orders]
      summary: Get an order
      operationId: getOrder
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags: [Orders]
      summary: Update an order
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Update error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags: [Orders]
      summary: Delete an order
      operationId: deleteOrder
      responses:
        '200':
          description: Order deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/me:
    get:
      tags: [User]
      summary: Get the authenticated user's profile
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
  /api/me/bookings:
    get:
      tags: [User]
      summary: List bookings for the current user
      operationId: listUserBookings
      responses:
        '200':
          description: User bookings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            sessionId:
                              type: string
                            status:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                            session:
                              type: object
                              properties:
                                id:
                                  type: string
                                startAt:
                                  type: string
                                  format: date-time
                                endAt:
                                  type: string
                                  format: date-time
                                template:
                                  type: object
                                  properties:
                                    title:
                                      type: string
                                    level:
                                      type: string
                                coach:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                discipline:
                                  type: object
                                  properties:
                                    name:
                                      type: string
  /api/me/orders:
    get:
      tags: [User]
      summary: List orders for the current user
      operationId: listUserOrders
      responses:
        '200':
          description: User orders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
